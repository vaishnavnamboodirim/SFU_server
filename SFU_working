@startuml
actor User1
actor User2
actor RemoteUser
participant SignalingServer
participant SFU_media_server
skinparam maxMessageSize 150

'User 1: Read config file and connect to the signal server. Signal server will return socket ID 
User1 -> User1: Read configuration file
User1 -> SignalingServer: Connect into singaling server based on URL read from config file
activate SignalingServer
SignalingServer --> User1: Returning Socket ID
deactivate SignalingServer

'User1: SDP negotiation for creating datachannel to send stream to SFU media server
User1 -> SignalingServer: Send SDP offer
activate SignalingServer
activate SFU_media_server
SignalingServer -> SFU_media_server: Forward SDP offer
SFU_media_server -> SFU_media_server: Create peer object and save it for selective forwarding
SFU_media_server -> SFU_media_server: Create SDP answer
SFU_media_server -> SignalingServer: Send SDP answer
SignalingServer-->User1: Forwarding SDP answer
deactivate SFU_media_server
deactivate SignalingServer

'User1: Send ICE candidates to the SFU media server. This will complete datachannel creation for sending streams into SFU media server
User1 -> SignalingServer: Send ICE candidates
activate SignalingServer
activate SFU_media_server
SignalingServer -> SFU_media_server: Forward ICE candidates
SFU_media_server -> SFU_media_server: Add ICE candidates
deactivate SFU_media_server
deactivate SignalingServer

'User1: Produce audio stream and start sending into SFU media server
User1->User1: Produce mediastream
activate SFU_media_server
User1 -> SFU_media_server: Send media stream
SFU_media_server -> SFU_media_server: Add stream into object variable until receiver available
deactivate SFU_media_server


'User2: Read config file and connect to the signal server. Signal server will return socket ID 
User2 -> User2: Read configuration file
User2 -> SignalingServer: Connect into singaling server based on URL read from config file
activate SignalingServer
SignalingServer --> User2: Returning Socket ID
deactivate SignalingServer

'User2: SDP negotiation for creating datachannel to send stream to SFU media server
User2 -> SignalingServer: Send SDP offer
activate SignalingServer
activate SFU_media_server
SignalingServer -> SFU_media_server: Forward SDP offer
SFU_media_server -> SFU_media_server: Create peer object and save it for selective forwarding
SFU_media_server -> SFU_media_server: Create SDP answer
SFU_media_server -> SignalingServer: Send SDP answer
SignalingServer-->User2: Forwarding SDP answer
deactivate SFU_media_server
deactivate SignalingServer

'User2: Send ICE candidates to the SFU media server. This will complete datachannel creation for sending streams into SFU media server
User2 -> SignalingServer: Send ICE candidates
activate SignalingServer
activate SFU_media_server
SignalingServer -> SFU_media_server: Forward ICE candidates
SFU_media_server -> SFU_media_server: Add ICE candidates
deactivate SFU_media_server
deactivate SignalingServer

'User2: Produce audio stream and start sending into SFU media server
User2->User2: Produce mediastream
activate SFU_media_server
User2 -> SFU_media_server: Send media stream
SFU_media_server -> SFU_media_server: Add stream into object variable until receiver available
deactivate SFU_media_server

'RemoteUser: Read config file and connect to the signal server. Signal server will return socket ID 
RemoteUser -> RemoteUser: Read configuration file
RemoteUser -> SignalingServer: Connect into singaling server based on URL read from config file
activate SignalingServer
SignalingServer --> RemoteUser: Returning Socket ID
deactivate SignalingServer

'RemoteUser: SDP negotiation for creating datachannel to send stream to SFU media server
RemoteUser -> SignalingServer: Send SDP offer
activate SignalingServer
activate SFU_media_server
SignalingServer -> SFU_media_server: Forward SDP offer
SFU_media_server -> SFU_media_server: Create peer object and save it for selective forwarding
SFU_media_server -> SFU_media_server: Create SDP answer
SFU_media_server -> SignalingServer: Send SDP answer
SignalingServer-->RemoteUser: Forwarding SDP answer
deactivate SFU_media_server
deactivate SignalingServer

'RemoteUser: Send ICE candidates to the SFU media server. This will complete datachannel creation for sending streams into SFU media server
RemoteUser -> SignalingServer: Send ICE candidates
activate SignalingServer
activate SFU_media_server
SignalingServer -> SFU_media_server: Forward ICE candidates
SFU_media_server -> SFU_media_server: Add ICE candidates
deactivate SFU_media_server
deactivate SignalingServer

'RemoteUser: Produce audio stream and start sending into SFU media server
RemoteUser->RemoteUser: Produce mediastream
activate SFU_media_server
RemoteUser -> SFU_media_server: Send media stream
SFU_media_server -> SFU_media_server: Add stream into object variable until receiver available
deactivate SFU_media_server

'User1 : Read room from config file
User1->User1: Read config file and choose room
User1-->SignalingServer: Join to room
activate SignalingServer
deactivate SignalingServer

'User2 : Read room from config file
User2->User2: Read config file and choose room
User2-->SignalingServer: Join to room
activate SignalingServer
deactivate SignalingServer

'User1: Notify user1 that user2 has joined to the same room, then create a datachannel to receive user 2's stream.

SignalingServer-->User1 : Notifying user 1 that user 2 has joined to the same room
activate SignalingServer
deactivate SignalingServer
User1->User1:Create receiver's SDP offer
User1->SignalingServer:Send receiver's SDP offer
activate SignalingServer
SignalingServer->SFU_media_server:Forward receiver's SDP offer
activate SFU_media_server
SFU_media_server->SFU_media_server:Add user 1 to user 2's selective forwarding list
SFU_media_server->SFU_media_server:Create receiver's SDP answer
SFU_media_server->SignalingServer:Send receiver's SDP answer
deactivate SFU_media_server
SignalingServer-->User1:Forwarding receiver's SDP answer
deactivate SignalingServer
User1->SignalingServer:Send receiver's ICE Candidates
activate SignalingServer
SignalingServer->SFU_media_server:Forward receiver's ICE candidates
activate SFU_media_server
SFU_media_server->SFU_media_server:Add receiver's ICE candidates
deactivate SignalingServer
deactivate SFU_media_server

'User2: Notify user2 that user1 has joined to the same room, then create a datachannel to receive user1's stream.
SignalingServer-->User2 : Notifying User 2 that User 1 has joined to the same room
activate SignalingServer
deactivate SignalingServer
User2->User2:Create receiver's SDP offer
User2->SignalingServer:Send receiver's SDP offer
activate SignalingServer
SignalingServer->SFU_media_server:Forward receiver's SDP offer
activate SFU_media_server
SFU_media_server->SFU_media_server:Add User 2 to User 1's selective forwarding list
SFU_media_server->SFU_media_server:Create receiver's SDP answer
SFU_media_server->SignalingServer:Send receiver's SDP answer
deactivate SFU_media_server
SignalingServer-->User2:Forwarding receiver's SDP answer
deactivate SignalingServer
User2->SignalingServer:Send receiver's ICE Candidates
activate SignalingServer
SignalingServer->SFU_media_server:Forward receiver's ICE candidates
activate SFU_media_server
SFU_media_server->SFU_media_server:Add receiver's ICE candidates
deactivate SignalingServer
deactivate SFU_media_server

'RemoteUser : Read room from config file
RemoteUser->RemoteUser: Read config file and choose room
RemoteUser-->SignalingServer: Join to room
activate SignalingServer
deactivate SignalingServer

'RemoteUser: Notify RemoteUser that user1 has joined to the same room, then create a datachannel to receive user1's stream.
SignalingServer-->RemoteUser : Notifying RemoteUser that User1 has joined to the same room
activate SignalingServer
deactivate SignalingServer
RemoteUser->RemoteUser:Create receiver's SDP offer
RemoteUser->SignalingServer:Send receiver's SDP offer
activate SignalingServer
SignalingServer->SFU_media_server:Forward receiver's SDP offer
activate SFU_media_server
SFU_media_server->SFU_media_server:Add RemoteUser to User 1's selective forwarding list
SFU_media_server->SFU_media_server:Create receiver's SDP answer
SFU_media_server->SignalingServer:Send receiver's SDP answer
deactivate SFU_media_server
SignalingServer-->RemoteUser:Forwarding receiver's SDP answer
deactivate SignalingServer
RemoteUser->SignalingServer:Send receiver's ICE Candidates
activate SignalingServer
SignalingServer->SFU_media_server:Forward receiver's ICE candidates
activate SFU_media_server
SFU_media_server->SFU_media_server:Add receiver's ICE candidates
deactivate SignalingServer
deactivate SFU_media_server

'RemoteUser: Notify RemoteUser that user2 has joined to the same room, then create a datachannel to receive user2's stream.
SignalingServer-->RemoteUser : Notifying RemoteUser that User2 has joined to the same room
activate SignalingServer
deactivate SignalingServer
RemoteUser->RemoteUser:Create receiver's SDP offer
RemoteUser->SignalingServer:Send receiver's SDP offer
activate SignalingServer
SignalingServer->SFU_media_server:Forward receiver's SDP offer
activate SFU_media_server
SFU_media_server->SFU_media_server:Add RemoteUser to User 2's selective forwarding list
SFU_media_server->SFU_media_server:Create receiver's SDP answer
SFU_media_server->SignalingServer:Send receiver's SDP answer
deactivate SFU_media_server
SignalingServer-->RemoteUser:Forwarding receiver's SDP answer
deactivate SignalingServer
RemoteUser->SignalingServer:Send receiver's ICE Candidates
activate SignalingServer
SignalingServer->SFU_media_server:Forward receiver's ICE candidates
activate SFU_media_server
SFU_media_server->SFU_media_server:Add receiver's ICE candidates
deactivate SignalingServer
deactivate SFU_media_server

'RemoteUser: Notify User1 that RemoteUser has joined to the same room, then create a datachannel to receive RemoteUser's stream.
SignalingServer-->User1 : Notifying User1 that RemoteUser has joined to the same room
activate SignalingServer
deactivate SignalingServer
User1->User1:Create receiver's SDP offer
User1->SignalingServer:Send receiver's SDP offer
activate SignalingServer
SignalingServer->SFU_media_server:Forward receiver's SDP offer
activate SFU_media_server
SFU_media_server->SFU_media_server:Add User1 to RemoteUser's selective forwarding list
SFU_media_server->SFU_media_server:Create receiver's SDP answer
SFU_media_server->SignalingServer:Send receiver's SDP answer
deactivate SFU_media_server
SignalingServer-->User1:Forwarding receiver's SDP answer
deactivate SignalingServer
User1->SignalingServer:Send receiver's ICE Candidates
activate SignalingServer
SignalingServer->SFU_media_server:Forward receiver's ICE candidates
activate SFU_media_server
SFU_media_server->SFU_media_server:Add receiver's ICE candidates
deactivate SignalingServer
deactivate SFU_media_server

'RemoteUser: Notify User2 that RemoteUser has joined to the same room, then create a datachannel to receive RemoteUser's stream.
SignalingServer-->User2 : Notifying User2 that RemoteUser has joined to the same room
activate SignalingServer
deactivate SignalingServer
User2->User2:Create receiver's SDP offer
User2->SignalingServer:Send receiver's SDP offer
activate SignalingServer
SignalingServer->SFU_media_server:Forward receiver's SDP offer
activate SFU_media_server
SFU_media_server->SFU_media_server:Add User2 to RemoteUser's selective forwarding list
SFU_media_server->SFU_media_server:Create receiver's SDP answer
SFU_media_server->SignalingServer:Send receiver's SDP answer
deactivate SFU_media_server
SignalingServer-->User2:Forwarding receiver's SDP answer
deactivate SignalingServer
User2->SignalingServer:Send receiver's ICE Candidates
activate SignalingServer
SignalingServer->SFU_media_server:Forward receiver's ICE candidates
activate SFU_media_server
SFU_media_server->SFU_media_server:Add receiver's ICE candidates
deactivate SignalingServer
deactivate SFU_media_server

'User1 and User2: Receive mediastream of RemoteUser
SFU_media_server->SFU_media_server: Read selective forward list of remote terminal
activate SFU_media_server
SFU_media_server-->User1: Forwarding stream of remote terminal
SFU_media_server-->User2:Forwarding stream of remote terminal
deactivate SFU_media_server 

'User2 and RemoteUser: Receive mediastream of User1
SFU_media_server->SFU_media_server: Read selective forward list of remote terminal
activate SFU_media_server
SFU_media_server-->User2: Forwarding stream of User1
SFU_media_server-->RemoteUser:Forwarding stream of User1
deactivate SFU_media_server 

'User1 and RemoteUser: Receive mediastream of User2
SFU_media_server->SFU_media_server: Read selective forward list of remote terminal
activate SFU_media_server
SFU_media_server-->User1: Forwarding stream of User2
SFU_media_server-->RemoteUser:Forwarding stream of User2
deactivate SFU_media_server 

'User1: Leaving from room, Then SignalingServer will invoke functions to update selective forwarding list and notify other members of same room that User1 left
User1-->SignalingServer:Leave from room
activate SignalingServer
SignalingServer->SFU_media_server:Invoke functions to cleanup 
activate SFU_media_server
SFU_media_server->SFU_media_server:Update the selective forward list
SFU_media_server->SFU_media_server: Clean up peer object that contains user 1's stream
SFU_media_server-->SignalingServer:Cleanup success
deactivate SFU_media_server
SignalingServer-->User2: Notify other room members that user 1 left
SignalingServer-->RemoteUser: Notify other room members that user 1 left
deactivate SignalingServer

'User2: Leaving from room, Then SignalingServer will invoke functions to update selective forwarding list and notify other members of same room that User2 left
User2-->SignalingServer:Leave from room
activate SignalingServer
SignalingServer->SFU_media_server:Invoke functions to cleanup 
activate SFU_media_server
SFU_media_server->SFU_media_server:Update the selective forward list
SFU_media_server->SFU_media_server: Clean up peer object that contains User2's stream
SFU_media_server-->SignalingServer:Cleanup success
deactivate SFU_media_server
SignalingServer-->RemoteUser: Notify other room members that user 1 left
deactivate SignalingServer

'RemoteUser: Leaving from room, Then SignalingServer will invoke functions to update selective forwarding list and notify other members of same room that RemoteUser left
RemoteUser-->SignalingServer:Leave from room
activate SignalingServer
SignalingServer->SFU_media_server:Invoke functions to cleanup 
activate SFU_media_server
SFU_media_server->SFU_media_server:Update the selective forward list
SFU_media_server->SFU_media_server: Clean up peer object that contains RemoteUser's stream
SFU_media_server-->SignalingServer:Cleanup success
deactivate SFU_media_server
deactivate SignalingServer

@enduml
